from typing import List
from config import WORD_FILE

class Words:
    
    # ChatGPT 4.o helped with the loading words from the words.txt file
    def __init__(self):
        # Add words from "Words.txt"
        with open(WORD_FILE, 'r') as file:
            # Read words from the file, stripping any whitespace
            self.words: List[Word] = [Word(line.strip()) for line in file if line.strip()]
        
    def get_words_by_length (self, length):
        """
        Get words by length
        """
        return [word for word in self.words if len(word) == length]
    
    def get_words_by_length_and_letter (self, length, letter):
        """
        Get words by length and letter with the option to filter out words that are in use
        """
        return [word for word in self.words if len(word) == length and letter in word]
    
    # Generated by ChatGPT 4.o
    # Allow iteration over Words by iterating over self.words
    def __iter__(self):
        return iter(self.words)
    
    # Generated by ChatGPT 4.o
    # Optionally, add __getitem__ if you want to use indexing
    def __getitem__(self, index):
        return self.words[index]
    
    # Generated by ChatGPT 4.o
    # Optionally, add __len__ to allow len(Words()) to work
    def __len__(self):
        return len(self.words)
    
class Word:
    def __init__(self, word):
        self.text = word
        self.in_use = False
        
        
    def mark_in_use(self):
        """Marks this word as in use."""
        self.in_use = True

    def mark_not_in_use(self):
        """Marks this word as not in use."""
        self.in_use = False
        
        
    def __repr__(self):
        
        return self.text + " " + str(self.in_use)
    
    # Generated by ChatGPT 4.o
    # Allow iteration over Text by iterating over self.text
    def __iter__(self) -> int:
        return iter(self.text)
    
    # Generated by ChatGPT 4.o
    # Optionally, add __getitem__ if you want to use indexing
    def __getitem__(self, index):
        return self.text[index]
    
    # Generated by ChatGPT 4.o
    # Optionally, add __len__ to allow len(Text()) to work
    def __len__(self):
        return len(self.text)
        